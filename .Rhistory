source('~/GitHub/page-rank-markov/Test.R')
n <- 3 #numbers of nodes/pages
a <- matrix(c(0,2,0)) #node A with B point to it. B has 2 outgoing links
b <- matrix(c(2,0,1)) #node B with A&C nodes pointing to it. A has 2 out links, C has 1
c <- matrix(c(2,2,0)) #node C with A&B pointing to it.
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage
d <- .85 # google prob of going from a link
for (i in 1:100){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
}
p #the results
(1-d)/n + d*(p[2]/2 )
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage
(1-d)/n + d*(p[2]/2 )
p[2]
(1-d)/n + d*(p[1]/2 + p[3]/1)
d*(p[1]/2 + p[3]/1)
(p[1]/2 + p[3]/1)
d*(p[1]/2 + p[3]/1)
(1-d)/n + d*(p[1]/2 + p[3]/1)
d*(p[1]/2 + p[3]/1)
(1-d)/n
.425+.05
+ d*(p[1]/2 + p[3]/1)
(1-d)/n + d*(p[1]/2 + p[3]/1)
(1-d)/n + d*(p[1]/2 + p[2]/2)
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
d*(p[2]/2 )
(1-d)/n + d*(p[2]/2 )
d*(p[1]/2 + p[3]/1)
d*(p[1]/2 + p[2]/2)
for (i in 1:100){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
}
p #the results
for (i in 1:10){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
}
p #the results
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage
d <- .85 # google prob of going from a link
for (i in 1:10){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
}
p #the results
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
p #the results
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
p #the results
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
p #the results
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage
d <- .85 # google prob of going from a link
for (i in 1:10){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
}
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage
d <- .85 # google prob of going from a link
for (i in 1:10){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
print(p)
}
for (i in 1:10){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
if (i / 10) {
print(p)
}
}
c <- matrix(c(2,2,0)) #node C with A&B pointing to it.
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage
d <- .85 # google prob of going from a link
for (i in 1:10){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
if (i %/% 10 == 0) {
print(p)
}
}
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage
d <- .85 # google prob of going from a link
for (i in 1:10){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
if ( (i %/% 10) == 0) {
print(p)
}
}
1 %/% 10
2 %/% 10
3 %/% 10
for (i in 1:10){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
if ( (i %% 10) == 0) {
print(p)
}
}
for (i in 1:10){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
if ( i ==1 OR (i %% 10) == 0) {
print(p)
}
}
for (i in 1:10){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
if ( i == 1 OR (i %% 10) == 0) {
print(p)
}
}
c <- matrix(c(2,2,0)) #node C with A&B pointing to it.
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage
d <- .85 # google prob of going from a link
for (i in 1:10){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
if ( i == 1 OR (i %% 10) == 0) {
print(p)
}
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage
d <- .85 # google prob of going from a link
for (i in 1:10){ #loops every new probability until it normalized.
pr.a <- (1-d)/n + d*(p[2]/2 )
pr.b <- (1-d)/n + d*(p[1]/2 + p[3]/1)
pr.c <- (1-d)/n + d*(p[1]/2 + p[2]/2)
p <- matrix(cbind(pr.a,pr.b,pr.c),n)
if ( i == 1 | (i %% 10) == 0) {
print(p)
}
}
p
colnames(p) <- Probability
colnames(p) <- "Probability"
rownames(p) <- c("A","B","C")
p
test_matrix <- matrix(c(a,b,c),byrow=TRUE)
test_matrix
test_matrix <- matrix(c(a,b,c),len(a),3,byrow=TRUE)
test_matrix
?len
?length
test_matrix <- matrix(c(a,b,c),length(a),3,byrow=TRUE)
test_matrix
test_matrix <- matrix(c(a,b,c),length(a),3,bycol=TRUE)
test_matrix
test_matrix <- matrix(c(a,b,c),length(a),3,bycol=TRUE)
?matrix
test_matrix <- matrix(c(a,b,c),length(a),3,byrow=FALSE)
test_matrix
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage. Let's from now on refer to it as "0 Iteration or KNOT Iteration" because no iterations have actually been ran yet
colnames(p) <- "Probability" # Name column of P vector
rownames(p) <- c("Node A","Node B","Node C") # Name each row so can easily identify to which node
test_matrix*p
p*test_matrix
test_matrix %*% p
solve(test_matrix) %*% p
p_test <- solve(test_matrix) %*% p
p_test <- solve(test_matrix) %*% p_test
p_test <- solve(test_matrix) %*% p_test
p_test <- solve(test_matrix) %*% p_test
p_test <- solve(test_matrix) %*% p_test
p_test <- solve(test_matrix) %*% p_test
p_test <- solve(test_matrix) %*% p_test
p_test <- solve(test_matrix) %*% p_test
p_test <- solve(test_matrix) %*% p_test
p_test
test_matrix
p_test <- solve(test_matrix) %*% p
p_test <- solve(test_matrix) %*% p_test
p_test
p_test <- solve(test_matrix) %*% p_test
p_test
test_matrix <- matrix(c(a,b,c),length(a),3,byrow=FALSE)
test_matrix
a <- matrix(c(0,1/2,0)) #node A with B point to it. B has 2 outgoing links
b <- matrix(c(1/2,0,1)) #node B with A&C nodes pointing to it. A has 2 out links, C has 1
c <- matrix(c(1/2,1/2,0)) #node C with A&B pointing to it.
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage. Let's from now on refer to it as "0 Iteration or KNOT Iteration" because no iterations have actually been ran yet
test_matrix <- matrix(c(a,b,c),length(a),3,byrow=FALSE)
test_matrix
p_test <- solve(test_matrix) %*% p
p_test
p_test <- solve(test_matrix) %*% p
p_test <- solve(test_matrix) %*% p_test
p_test
p_test <- solve(test_matrix) %*% p_test
p_test
test_matrix
test_matrix <- matrix(c(a,b,c),length(a),3,byrow=TRUE)
test_matrix
p_test <- solve(test_matrix) %*% p
p_test <- solve(test_matrix) %*% p_test
p_test
p_test <- solve(test_matrix) %*% p_test
p_test
test_matrix
p_test <- solve(test_matrix) %*% p
p_test
p <- matrix(c(1,0,0)) #probability of being on a page. Here I set the 1st interation to A as a homepage. Let's from now on refer to it as "0 Iteration or KNOT Iteration" because no iterations have actually been ran yet
p_test <- solve(test_matrix) %*% p
p_test <- solve(test_matrix) %*% p_test
p_test
library(readxl) #package to read excel files
website <- read_excel("websites.xlsx") # get data from excel
nx <- length(website) #numbers of nodes/pages
website <- data.matrix(website) # convert data to matrix and transpose
gp <- .85 # google prob of going from a link
#probability of being on a page. Here I set the 1st interation to A as a homepage
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
#PageRank formula. Dot product of website matrix with probability vector.
pb <-  (1-gp)/nx + gp*(website%*%pb)
print(pb)
}
pb #the results
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
for (i in 1:50){ #loops every new probability until it normalized.
#PageRank formula. Dot product of website matrix with probability vector.
pb <-  (1-gp)/nx + gp*(website%*%pb)
print(pb)
}
pb #the results
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
for (i in 1:50){ #loops every new probability until it normalized.
#PageRank formula. Dot product of website matrix with probability vector.
pb <-  (1-gp)/nx + gp*(website%*%pb)
print(pb)
}
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
for (i in 1:50){ #loops every new probability until it normalized.
#PageRank formula. Dot product of website matrix with probability vector.
pb_temp <- pb
pb <-  (1-gp)/nx + gp*(website%*%pb)
if (pb_temp - pb < abs(0.000001)) {
print(pb)
print(i)
break
}
}
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
for (i in 1:50){ #loops every new probability until it normalized.
#PageRank formula. Dot product of website matrix with probability vector.
pb_temp <- pb
pb <-  (1-gp)/nx + gp*(website%*%pb)
if ( (pb_temp - pb) < abs(0.000001)) {
print(pb)
print(i)
break
}
}
delta_threshold <- 1e-10
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
delta_threshold <- 1e-10
for (i in 1:50){ #loops every new probability until it normalized.
#PageRank formula. Dot product of website matrix with probability vector.
pb_temp <- pb
pb <-  (1-gp)/nx + gp*(website%*%pb)
if ( abs(pb_temp - pb) < delta_threshold) {
print(pb)
print(i)
break
}
}
warnings()
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
pb_temp <- pb
pb <-  (1-gp)/nx + gp*(website%*%pb)
pb #the results
pb_tempt
pb_temp
pb_temp - pb
check_vector <- abs(pb_temp - pb)
check_vector
for (n in 1:nx) {
if ( check_vector[n] <= delta_threshold) {
print(pb)
}
print(n)
}
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
for (i in 1:50){ #loops every new probability until it normalized.
#PageRank formula. Dot product of website matrix with probability vector.
pb_temp <- pb
pb <-  (1-gp)/nx + gp*(website%*%pb)
check_vector <- abs(pb_temp - pb)
for (n in 1:nx) {
if ( check_vector[n] < delta_threshold) {
print(pb)
print(i)
break
}
}
}
?break
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
for (i in 1:50){ #loops every new probability until it normalized.
#PageRank formula. Dot product of website matrix with probability vector.
pb_temp <- pb
pb <-  (1-gp)/nx + gp*(website%*%pb)
check_vector <- abs(pb_temp - pb)
for (n in 1:nx) {
if ( check_vector[n] > delta_threshold) {
}
print(pb)
print(i)
break
}
}
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
for (i in 1:50) { #loops every new probability until it normalized.
#PageRank formula. Dot product of website matrix with probability vector.
pb_temp <- pb
pb <-  (1-gp)/nx + gp*(website%*%pb)
check_vector <- abs(pb_temp - pb)
check_bool <- FALSE
for (n in 1:nx) {
if ( check_vector[n] < delta_threshold) {
check_bool <- TRUE
}
else {
check_bool <- FALSE
}
if (check_bool == TRUE) {
return(pb)
return(i)
}
}
}
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
for (i in 1:50) { #loops every new probability until it normalized.
#PageRank formula. Dot product of website matrix with probability vector.
pb_temp <- pb
pb <-  (1-gp)/nx + gp*(website%*%pb)
check_vector <- abs(pb_temp - pb)
check_bool <- FALSE
for (n in 1:nx) {
if ( check_vector[n] < delta_threshold) {
check_bool <- TRUE
}
else {
check_bool <- FALSE
}
if (check_bool == TRUE) {
print(pb)
print(i)
}
}
}
pb <- c(1, 0, 0 , 0)
for (i in 1:50) { #loops every new probability until it normalized.
#PageRank formula. Dot product of website matrix with probability vector.
pb_temp <- pb
pb <-  (1-gp)/nx + gp*(website%*%pb)
check_vector <- abs(pb_temp - pb)
check_bool <- FALSE
for (n in 1:nx) {
if ( check_vector[n] < delta_threshold) {
check_bool <- TRUE
}
else {
check_bool <- FALSE
}
if (check_bool == TRUE) {
print(pb)
print(i)
break
}
}
}
pb <- c(1, 0, 0 , 0)
delta_threshold <- 1e-10
for (i in 1:50) { #loops every new probability until it normalized.
#PageRank formula. Dot product of website matrix with probability vector.
pb_temp <- pb
pb <-  (1-gp)/nx + gp*(website%*%pb)
check_vector <- abs(pb_temp - pb)
check_bool <- FALSE
break_key <- FALSE
for (n in 1:nx) {
if ( check_vector[n] < delta_threshold) {
check_bool <- TRUE
}
else {
check_bool <- FALSE
}
if (check_bool == TRUE) {
print(pb)
print(i)
break_key <- TRUE
break
}
}
if (break_key == TRUE) {
break
}
}
print(i)
print(i + "iteration")
pb <- scan(text = readline(prompt = "Give the initial probability of being on a page \n"))
for (i in 1:50)
{ #loops every new probability until it normalized.
#PageRank formula. Dot product of website matrix with probability vector.
pb_temp <- pb
pb <-  (1-gp)/nx + gp*(website%*%pb)
# Created checks and differences between pb and previous pb iteration (aka check_vector)
check_vector <- abs(pb_temp - pb)
check_bool <- FALSE
break_key <- FALSE
# Run this over every element in check_vector
for (n in 1:nx)
{
# If every value in check_vector are less than 1e-10, change check_bool to TRUE. Otherwise change it back to FALSE.
if ( check_vector[n] < delta_threshold)
{
check_bool <- TRUE
}
else
{
check_bool <- FALSE
}
# If check_bool stays TRUE, then print pb table, iteration number and change break_key to TRUE...then break out of FOR (n in 1:nx) loop
if (check_bool == TRUE)
{
print("Probabilities converge to steady state vector")
print(pb)
print("At iteration number")
print(i)
break_key <- TRUE
break
}
}
# If break_key is TRUE, then break out of FOR (i in 1:50) loop too. Without this, code will keep running and printing every iteration afterwards
if (break_key == TRUE)
{
break
}
}
